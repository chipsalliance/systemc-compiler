//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.15
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a"
(
    input logic clk
);

// Variables generated for SystemC signals
logic rstn;
logic signed [31:0] sig;

// Local parameters generated for C++ constants
localparam logic signed [31:0] A = 1;

//------------------------------------------------------------------------------
// Clocked THREAD: single_rec_call_reg (test_fcall_cthread.cpp:98:5) 

// Thread-local variables
logic s_a;
logic s_a_next;
logic single_rec_call_reg_PROC_STATE;
logic single_rec_call_reg_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : single_rec_call_reg_comb     // test_fcall_cthread.cpp:98:5
    single_rec_call_reg_func;
end
function void single_rec_call_reg_func;
    integer s_B;
    logic s_par;
    logic c;
    s_a_next = s_a;
    single_rec_call_reg_PROC_STATE_next = single_rec_call_reg_PROC_STATE;
    
    case (single_rec_call_reg_PROC_STATE)
        0: begin
            s_par = 1;
            // Call setA() begin
            s_a_next = s_par;
            // Call setA() end
            single_rec_call_reg_PROC_STATE_next = 1; return;    // test_fcall_cthread.cpp:105:13;
        end
        1: begin
            c = 1;    // Call of getA()
            s_par = 1;
            // Call setA() begin
            s_a_next = s_par;
            // Call setA() end
            single_rec_call_reg_PROC_STATE_next = 1; return;    // test_fcall_cthread.cpp:105:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : single_rec_call_reg_ff
    if ( ~rstn ) begin
        integer s_B;
        integer s_b;
        s_B = 2;
        single_rec_call_reg_PROC_STATE <= 0;    // test_fcall_cthread.cpp:101:9;
    end
    else begin
        s_a <= s_a_next;
        single_rec_call_reg_PROC_STATE <= single_rec_call_reg_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: single_rec_call_comb (test_fcall_cthread.cpp:112:5) 

// Next-state combinational logic
always_comb begin : single_rec_call_comb_comb     // test_fcall_cthread.cpp:112:5
    single_rec_call_comb_func;
end
function void single_rec_call_comb_func;
    integer r_B;
    logic r_a;
    logic r_par;
    logic c;
    r_par = 1;
    // Call setA() begin
    r_a = r_par;
    // Call setA() end
    c = 1;    // Call of getA()
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : single_rec_call_comb_ff
    if ( ~rstn ) begin
        integer r_B;
        logic r_a;
        integer r_b;
        r_B = 2;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_reg (test_fcall_cthread.cpp:127:5) 

// Thread-local variables
logic t_a[2];
logic t_a_next[2];
logic signed [31:0] t_b[2];
logic signed [31:0] t_b_next[2];
logic signed [31:0] t_B[2];
logic signed [31:0] t_B_next[2];
logic rec_arr_call_reg_PROC_STATE;
logic rec_arr_call_reg_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : rec_arr_call_reg_comb     // test_fcall_cthread.cpp:127:5
    rec_arr_call_reg_func;
end
function void rec_arr_call_reg_func;
    logic t_par;
    logic c;
    t_B_next = t_B;
    t_a_next = t_a;
    t_b_next = t_b;
    rec_arr_call_reg_PROC_STATE_next = rec_arr_call_reg_PROC_STATE;
    
    case (rec_arr_call_reg_PROC_STATE)
        0: begin
            t_par = 1;
            // Call setA() begin
            t_a_next[1] = t_par;
            // Call setA() end
            rec_arr_call_reg_PROC_STATE_next = 1; return;    // test_fcall_cthread.cpp:135:13;
        end
        1: begin
            // Call reset() begin
            t_a_next[0] = |(A + t_a_next[0]);
            t_b_next[0] = t_B_next[0] + t_b_next[0];
            // Call reset() end
            c = 1;    // Call of getA()
            t_par = 1;
            // Call setA() begin
            t_a_next[1] = t_par;
            // Call setA() end
            rec_arr_call_reg_PROC_STATE_next = 1; return;    // test_fcall_cthread.cpp:135:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_reg_ff
    if ( ~rstn ) begin
        // Call reset() begin
        t_a[0] <= |(A + t_a[0]);
        t_b[0] <= t_B[0] + t_b[0];
        // Call reset() end
        rec_arr_call_reg_PROC_STATE <= 0;    // test_fcall_cthread.cpp:131:9;
    end
    else begin
        t_a <= t_a_next;
        t_b <= t_b_next;
        t_B <= t_B_next;
        rec_arr_call_reg_PROC_STATE <= rec_arr_call_reg_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_comb (test_fcall_cthread.cpp:143:5) 

// Next-state combinational logic
always_comb begin : rec_arr_call_comb_comb     // test_fcall_cthread.cpp:143:5
    rec_arr_call_comb_func;
end
function void rec_arr_call_comb_func;
    integer q_B[2];
    logic q_a[2];
    integer q_b[2];
    logic q_par;
    logic c;
    q_par = 1;
    // Call setA() begin
    q_a[1] = q_par;
    // Call setA() end
    c = 1;    // Call of getA()
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_comb_ff
    if ( ~rstn ) begin
        integer q_B[2];
        integer q_b[2];
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_reset_reg2 (test_fcall_cthread.cpp:157:5) 

// Thread-local variables
logic w_a[2];
logic w_a_next[2];
logic rec_arr_call_reset_reg2_PROC_STATE;
logic rec_arr_call_reset_reg2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : rec_arr_call_reset_reg2_comb     // test_fcall_cthread.cpp:157:5
    rec_arr_call_reset_reg2_func;
end
function void rec_arr_call_reset_reg2_func;
    integer w_B[2];
    integer w_b[2];
    logic c;
    w_a_next = w_a;
    rec_arr_call_reset_reg2_PROC_STATE_next = rec_arr_call_reset_reg2_PROC_STATE;
    
    case (rec_arr_call_reset_reg2_PROC_STATE)
        0: begin
            c = 1;    // Call of getA()
            rec_arr_call_reset_reg2_PROC_STATE_next = 1; return;    // test_fcall_cthread.cpp:165:13;
        end
        1: begin
            rec_arr_call_reset_reg2_PROC_STATE_next = 1; return;    // test_fcall_cthread.cpp:165:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_reset_reg2_ff
    if ( ~rstn ) begin
        integer w_B[2];
        integer w_b[2];
        logic w_par;
        w_par = 1;
        // Call setA() begin
        w_a[1] <= w_par;
        // Call setA() end
        rec_arr_call_reset_reg2_PROC_STATE <= 0;    // test_fcall_cthread.cpp:161:9;
    end
    else begin
        w_a <= w_a_next;
        rec_arr_call_reset_reg2_PROC_STATE <= rec_arr_call_reset_reg2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_reg2 (test_fcall_cthread.cpp:169:5) 

// Thread-local variables
logic z_a[2];
logic z_a_next[2];

// Next-state combinational logic
always_comb begin : rec_arr_call_reg2_comb     // test_fcall_cthread.cpp:169:5
    rec_arr_call_reg2_func;
end
function void rec_arr_call_reg2_func;
    integer z_B[2];
    integer z_b[2];
    logic TMP_0;
    logic c;
    z_a_next = z_a;
    // Call getA() begin
    TMP_0 = z_a_next[1];
    // Call getA() end
    c = TMP_0;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_reg2_ff
    if ( ~rstn ) begin
    end
    else begin
        z_a <= z_a_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_unknw_reg (test_fcall_cthread.cpp:182:5) 

// Thread-local variables
logic signed [31:0] s_B0[2];
logic signed [31:0] s_B_next[2];
logic s_a0[2];
logic s_a_next0[2];

// Next-state combinational logic
always_comb begin : rec_arr_call_unknw_reg_comb     // test_fcall_cthread.cpp:182:5
    rec_arr_call_unknw_reg_func;
end
function void rec_arr_call_unknw_reg_func;
    integer s_b[2];
    integer j;
    logic s_par;
    logic TMP_0;
    logic c;
    s_B_next = s_B0;
    s_a_next0 = s_a0;
    j = sig + s_B_next[1];
    s_par = 1;
    // Call setA() begin
    s_a_next0[1] = s_par;
    // Call setA() end
    // Call getA() begin
    TMP_0 = s_a_next0[j];
    // Call getA() end
    c = TMP_0;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_unknw_reg_ff
    if ( ~rstn ) begin
        integer s_b[2];
    end
    else begin
        s_B0 <= s_B_next;
        s_a0 <= s_a_next0;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_unknw_reg2 (test_fcall_cthread.cpp:197:5) 

// Thread-local variables
logic s_a1[2];
logic s_a_next1[2];

// Next-state combinational logic
always_comb begin : rec_arr_call_unknw_reg2_comb     // test_fcall_cthread.cpp:197:5
    rec_arr_call_unknw_reg2_func;
end
function void rec_arr_call_unknw_reg2_func;
    integer s_B[2];
    integer s_b[2];
    integer j;
    logic s_par;
    logic TMP_0;
    logic c;
    s_a_next1 = s_a1;
    j = sig;
    s_par = 1;
    // Call setA() begin
    s_a_next1[j] = s_par;
    // Call setA() end
    // Call getA() begin
    TMP_0 = s_a_next1[1];
    // Call getA() end
    c = TMP_0;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_unknw_reg2_ff
    if ( ~rstn ) begin
        integer s_B[2];
        integer s_b[2];
    end
    else begin
        s_a1 <= s_a_next1;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_unknw_reg3 (test_fcall_cthread.cpp:212:5) 

// Thread-local variables
logic s_a2[2];
logic s_a_next2[2];

// Next-state combinational logic
always_comb begin : rec_arr_call_unknw_reg3_comb     // test_fcall_cthread.cpp:212:5
    rec_arr_call_unknw_reg3_func;
end
function void rec_arr_call_unknw_reg3_func;
    integer s_B[2];
    integer s_b[2];
    integer j;
    logic s_par;
    logic TMP_0;
    logic c;
    s_a_next2 = s_a2;
    j = sig;
    s_par = 1;
    // Call setA() begin
    s_a_next2[j] = s_par;
    // Call setA() end
    // Call getA() begin
    TMP_0 = s_a_next2[j];
    // Call getA() end
    c = TMP_0;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_unknw_reg3_ff
    if ( ~rstn ) begin
        integer s_B[2];
        integer s_b[2];
    end
    else begin
        s_a2 <= s_a_next2;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_unknw_loc (test_fcall_cthread.cpp:229:5) 

// Next-state combinational logic
always_comb begin : rec_arr_call_unknw_loc_comb     // test_fcall_cthread.cpp:229:5
    rec_arr_call_unknw_loc_func;
end
function void rec_arr_call_unknw_loc_func;
    integer s_B[2];
    logic s_a_1[2];
    integer s_b[2];
    integer j;
    integer TMP_0;
    integer s_l;
    j = sig;
    // Call locVar() begin
    s_l = 1;
    TMP_0 = s_l + 1;
    // Call locVar() end
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_unknw_loc_ff
    if ( ~rstn ) begin
        integer s_B[2];
        logic s_a_1[2];
        integer s_b[2];
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: rec_arr_call_unknw_loc_in_call (test_fcall_cthread.cpp:244:5) 

// Next-state combinational logic
always_comb begin : rec_arr_call_unknw_loc_in_call_comb     // test_fcall_cthread.cpp:244:5
    rec_arr_call_unknw_loc_in_call_func;
end
function void rec_arr_call_unknw_loc_in_call_func;
    integer s_B[2];
    logic s_a_1[2];
    integer s_b[2];
    integer j;
    integer TMP_0;
    integer s_k;
    j = sig;
    // Call locFcall() begin
    s_k = 2;    // Call of locVar()
    TMP_0 = s_k;
    // Call locFcall() end
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : rec_arr_call_unknw_loc_in_call_ff
    if ( ~rstn ) begin
        integer s_B[2];
        logic s_a_1[2];
        integer s_b[2];
    end
    else begin
    end
end

endmodule


