//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.15
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// Variables generated for SystemC signals
logic clk;
logic arstn;
logic signed [31:0] out;
logic signed [31:0] in;

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty1 (test_cthread_switch_empty_case.cpp:131:5) 

// Thread-local variables
logic signed [31:0] j;
logic signed [31:0] j_next;
logic test_switch_empty1_PROC_STATE;
logic test_switch_empty1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty1_comb     // test_cthread_switch_empty_case.cpp:131:5
    test_switch_empty1_func;
end
function void test_switch_empty1_func;
    integer i;
    j_next = j;
    test_switch_empty1_PROC_STATE_next = test_switch_empty1_PROC_STATE;
    
    case (test_switch_empty1_PROC_STATE)
        0: begin
            i = j_next;
            case (i)
            0 : begin  // Empty case without break
                j_next = 2;
            end
            1 : begin
                j_next = 2;
            end
            default : begin
                j_next = 3;
            end
            endcase
            test_switch_empty1_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:145:13;
        end
        1: begin
            i = 1;
            i = j_next;
            case (i)
            0 : begin  // Empty case without break
                j_next = 2;
            end
            1 : begin
                j_next = 2;
            end
            default : begin
                j_next = 3;
            end
            endcase
            test_switch_empty1_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:145:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty1_ff
    if ( ~arstn ) begin
        j <= 0;
        test_switch_empty1_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:134:9;
    end
    else begin
        j <= j_next;
        test_switch_empty1_PROC_STATE <= test_switch_empty1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty2 (test_cthread_switch_empty_case.cpp:151:5) 

// Thread-local variables
logic [1:0] test_switch_empty2_PROC_STATE;
logic [1:0] test_switch_empty2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty2_comb     // test_cthread_switch_empty_case.cpp:151:5
    test_switch_empty2_func;
end
function void test_switch_empty2_func;
    integer j_1;
    integer i;
    test_switch_empty2_PROC_STATE_next = test_switch_empty2_PROC_STATE;
    
    case (test_switch_empty2_PROC_STATE)
        0: begin
            i = 0;
            case (0)
            0 : begin  // Empty case without break
                j_1 = 2;
                test_switch_empty2_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:162:32;
            end
            1 : begin
                j_1 = 2;
                test_switch_empty2_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:162:32;
            end
            endcase
        end
        1: begin
            test_switch_empty2_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:165:13;
        end
        2: begin
            i = 1;
            i = 0;
            case (0)
            0 : begin  // Empty case without break
                j_1 = 2;
                test_switch_empty2_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:162:32;
            end
            1 : begin
                j_1 = 2;
                test_switch_empty2_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:162:32;
            end
            endcase
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty2_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty2_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:154:9;
    end
    else begin
        test_switch_empty2_PROC_STATE <= test_switch_empty2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty2a (test_cthread_switch_empty_case.cpp:170:5) 

// Thread-local variables
logic [1:0] test_switch_empty2a_PROC_STATE;
logic [1:0] test_switch_empty2a_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty2a_comb     // test_cthread_switch_empty_case.cpp:170:5
    test_switch_empty2a_func;
end
function void test_switch_empty2a_func;
    integer j_1;
    test_switch_empty2a_PROC_STATE_next = test_switch_empty2a_PROC_STATE;
    
    case (test_switch_empty2a_PROC_STATE)
        0: begin
            case (in)
            0 : begin  // Empty case without break
                j_1 = 2;
                test_switch_empty2a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:180:32;
            end
            1 : begin
                j_1 = 2;
                test_switch_empty2a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:180:32;
            end
            default : begin
                j_1 = 3;
            end
            endcase
            test_switch_empty2a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:183:13;
        end
        1: begin
            test_switch_empty2a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:183:13;
        end
        2: begin
            case (in)
            0 : begin  // Empty case without break
                j_1 = 2;
                test_switch_empty2a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:180:32;
            end
            1 : begin
                j_1 = 2;
                test_switch_empty2a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:180:32;
            end
            default : begin
                j_1 = 3;
            end
            endcase
            test_switch_empty2a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:183:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty2a_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty2a_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:173:9;
    end
    else begin
        test_switch_empty2a_PROC_STATE <= test_switch_empty2a_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty3 (test_cthread_switch_empty_case.cpp:188:5) 

// Thread-local variables
logic signed [31:0] i0;
logic signed [31:0] i_next;
logic [1:0] test_switch_empty3_PROC_STATE;
logic [1:0] test_switch_empty3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty3_comb     // test_cthread_switch_empty_case.cpp:188:5
    test_switch_empty3_func;
end
function void test_switch_empty3_func;
    integer j_1;
    integer k;
    i_next = i0;
    test_switch_empty3_PROC_STATE_next = test_switch_empty3_PROC_STATE;
    
    case (test_switch_empty3_PROC_STATE)
        0: begin
            i_next = 0;
            test_switch_empty3_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:196:13;
        end
        1: begin
            case (0)
            0 : begin  // Empty case without break
                j_1 = 2;
                // Call f() begin
                k = 0;
                test_switch_empty3_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:104:9;
                // Call f() end
            end
            1 : begin
                j_1 = 2;
                // Call f() begin
                k = 0;
                test_switch_empty3_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:104:9;
                // Call f() end
            end
            endcase
        end
        2: begin
            // Call f() begin
            k = 1;
            // Call f() end
            i_next = 1;
            i_next = 0;
            test_switch_empty3_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:196:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty3_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty3_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:191:9;
    end
    else begin
        i0 <= i_next;
        test_switch_empty3_PROC_STATE <= test_switch_empty3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty3a (test_cthread_switch_empty_case.cpp:208:5) 

// Thread-local variables
logic signed [31:0] j0;
logic signed [31:0] j_next0;
logic [1:0] test_switch_empty3a_PROC_STATE;
logic [1:0] test_switch_empty3a_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty3a_comb     // test_cthread_switch_empty_case.cpp:208:5
    test_switch_empty3a_func;
end
function void test_switch_empty3a_func;
    integer k;
    j_next0 = j0;
    test_switch_empty3a_PROC_STATE_next = test_switch_empty3a_PROC_STATE;
    
    case (test_switch_empty3a_PROC_STATE)
        0: begin
            test_switch_empty3a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:215:13;
        end
        1: begin
            case (in)
            0 : begin  // Empty case without break
                j_next0 = 2;
                // Call f() begin
                k = 0;
                test_switch_empty3a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:104:9;
                // Call f() end
            end
            1 : begin
                j_next0 = 2;
                // Call f() begin
                k = 0;
                test_switch_empty3a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:104:9;
                // Call f() end
            end
            default : begin
                j_next0 = 3;
                test_switch_empty3a_PROC_STATE_next = 3; return;    // test_cthread_switch_empty_case.cpp:221:33;
            end
            endcase
        end
        2: begin
            // Call f() begin
            k = 1;
            // Call f() end
            j_next0++;
            test_switch_empty3a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:215:13;
        end
        3: begin
            j_next0++;
            test_switch_empty3a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:215:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty3a_ff
    if ( ~arstn ) begin
        j0 <= 0;
        test_switch_empty3a_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:211:9;
    end
    else begin
        j0 <= j_next0;
        test_switch_empty3a_PROC_STATE <= test_switch_empty3a_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4 (test_cthread_switch_empty_case.cpp:228:5) 

// Thread-local variables
logic signed [31:0] i1;
logic signed [31:0] i_next0;
logic [1:0] test_switch_empty4_PROC_STATE;
logic [1:0] test_switch_empty4_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4_comb     // test_cthread_switch_empty_case.cpp:228:5
    test_switch_empty4_func;
end
function void test_switch_empty4_func;
    integer j_1;
    i_next0 = i1;
    test_switch_empty4_PROC_STATE_next = test_switch_empty4_PROC_STATE;
    
    case (test_switch_empty4_PROC_STATE)
        0: begin
            i_next0 = 0;
            test_switch_empty4_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:236:13;
        end
        1: begin
            case (0)
            0 : begin  // Empty case without break
                j_1 = 2;
                if (|in)
                begin
                    test_switch_empty4_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:242:40;
                end
            end
            1 : begin
                j_1 = 2;
                if (|in)
                begin
                    test_switch_empty4_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:242:40;
                end
            end
            endcase
            i_next0 = 1;
            i_next0 = 0;
            test_switch_empty4_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:236:13;
        end
        2: begin
            i_next0 = 1;
            i_next0 = 0;
            test_switch_empty4_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:236:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty4_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:231:9;
    end
    else begin
        i1 <= i_next0;
        test_switch_empty4_PROC_STATE <= test_switch_empty4_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4a (test_cthread_switch_empty_case.cpp:250:5) 

// Thread-local variables
logic signed [31:0] i2;
logic signed [31:0] i_next1;
logic [1:0] test_switch_empty4a_PROC_STATE;
logic [1:0] test_switch_empty4a_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4a_comb     // test_cthread_switch_empty_case.cpp:250:5
    test_switch_empty4a_func;
end
function void test_switch_empty4a_func;
    integer j_1;
    i_next1 = i2;
    test_switch_empty4a_PROC_STATE_next = test_switch_empty4a_PROC_STATE;
    
    case (test_switch_empty4a_PROC_STATE)
        0: begin
            i_next1 = 1;
            test_switch_empty4a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:258:13;
        end
        1: begin
            case (1)
            1 : begin
                j_1 = 2;
                if (|in)
                begin
                    test_switch_empty4a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:264:40;
                end
            end
            endcase
            i_next1 = 1;
            i_next1 = 1;
            test_switch_empty4a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:258:13;
        end
        2: begin
            i_next1 = 1;
            i_next1 = 1;
            test_switch_empty4a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:258:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4a_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty4a_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:253:9;
    end
    else begin
        i2 <= i_next1;
        test_switch_empty4a_PROC_STATE <= test_switch_empty4a_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4b (test_cthread_switch_empty_case.cpp:272:5) 

// Thread-local variables
logic signed [31:0] i3;
logic signed [31:0] i_next2;
logic test_switch_empty4b_PROC_STATE;
logic test_switch_empty4b_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4b_comb     // test_cthread_switch_empty_case.cpp:272:5
    test_switch_empty4b_func;
end
function void test_switch_empty4b_func;
    integer j_1;
    i_next2 = i3;
    test_switch_empty4b_PROC_STATE_next = test_switch_empty4b_PROC_STATE;
    
    case (test_switch_empty4b_PROC_STATE)
        0: begin
            i_next2 = 2;
            test_switch_empty4b_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:280:13;
        end
        1: begin
            case (2)
            default : begin
                j_1 = 3;
            end
            endcase
            i_next2 = 1;
            i_next2 = 2;
            test_switch_empty4b_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:280:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4b_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty4b_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:275:9;
    end
    else begin
        i3 <= i_next2;
        test_switch_empty4b_PROC_STATE <= test_switch_empty4b_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4c (test_cthread_switch_empty_case.cpp:294:5) 

// Thread-local variables
logic [1:0] test_switch_empty4c_PROC_STATE;
logic [1:0] test_switch_empty4c_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4c_comb     // test_cthread_switch_empty_case.cpp:294:5
    test_switch_empty4c_func;
end
function void test_switch_empty4c_func;
    integer j_1;
    integer i;
    test_switch_empty4c_PROC_STATE_next = test_switch_empty4c_PROC_STATE;
    
    case (test_switch_empty4c_PROC_STATE)
        0: begin
            i = 0;
            test_switch_empty4c_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:302:13;
        end
        1: begin
            case (in)
            0 : begin  // Empty case without break
                j_1 = 2;
                if (|in)
                begin
                    test_switch_empty4c_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:308:40;
                end
            end
            1 : begin
                j_1 = 2;
                if (|in)
                begin
                    test_switch_empty4c_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:308:40;
                end
            end
            default : begin
                j_1 = 3;
            end
            endcase
            i = 1;
            i = 0;
            test_switch_empty4c_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:302:13;
        end
        2: begin
            i = 1;
            i = 0;
            test_switch_empty4c_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:302:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4c_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty4c_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:297:9;
    end
    else begin
        test_switch_empty4c_PROC_STATE <= test_switch_empty4c_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4d (test_cthread_switch_empty_case.cpp:317:5) 

// Thread-local variables
logic signed [31:0] j1;
logic signed [31:0] j_next1;
logic signed [31:0] k0;
logic signed [31:0] k_next;
logic [1:0] test_switch_empty4d_PROC_STATE;
logic [1:0] test_switch_empty4d_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4d_comb     // test_cthread_switch_empty_case.cpp:317:5
    test_switch_empty4d_func;
end
function void test_switch_empty4d_func;
    integer i;
    j_next1 = j1;
    k_next = k0;
    test_switch_empty4d_PROC_STATE_next = test_switch_empty4d_PROC_STATE;
    
    case (test_switch_empty4d_PROC_STATE)
        0: begin
            i = 0;
            test_switch_empty4d_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:325:13;
        end
        1: begin
            case (in)
            0 : begin  // Empty case without break
                j_next1 = 2;
                k_next = 0;
                test_switch_empty4d_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:332:29;
            end
            1 : begin
                j_next1 = 2;
                k_next = 0;
                test_switch_empty4d_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:332:29;
            end
            default : begin
                j_next1 = 3;
            end
            endcase
            i = 1;
            i = 0;
            test_switch_empty4d_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:325:13;
        end
        2: begin
            j_next1++;
            k_next++;
            if (k_next < 2)
            begin
                test_switch_empty4d_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:332:29;
            end
            i = 1;
            i = 0;
            test_switch_empty4d_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:325:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4d_ff
    if ( ~arstn ) begin
        j1 <= 0;
        test_switch_empty4d_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:320:9;
    end
    else begin
        j1 <= j_next1;
        k0 <= k_next;
        test_switch_empty4d_PROC_STATE <= test_switch_empty4d_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4e (test_cthread_switch_empty_case.cpp:343:5) 

// Thread-local variables
logic signed [31:0] k1;
logic signed [31:0] k_next0;
logic test_switch_empty4e_PROC_STATE;
logic test_switch_empty4e_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4e_comb     // test_cthread_switch_empty_case.cpp:343:5
    test_switch_empty4e_func;
end
function void test_switch_empty4e_func;
    k_next0 = k1;
    test_switch_empty4e_PROC_STATE_next = test_switch_empty4e_PROC_STATE;
    
    case (test_switch_empty4e_PROC_STATE)
        0: begin
            case (in)
            0 : begin  // Empty case without break
                k_next0 = 0;
                test_switch_empty4e_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:353:29;
            end
            1 : begin
                k_next0 = 0;
                test_switch_empty4e_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:353:29;
            end
            default : begin
            end
            endcase
            test_switch_empty4e_PROC_STATE_next = 0; return;    // test_cthread_switch_empty_case.cpp:347:13;
        end
        1: begin
            k_next0++;
            if (k_next0 < 2)
            begin
                test_switch_empty4e_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:353:29;
            end
            test_switch_empty4e_PROC_STATE_next = 0; return;    // test_cthread_switch_empty_case.cpp:347:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4e_ff
    if ( ~arstn ) begin
        test_switch_empty4e_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:347:13;
    end
    else begin
        k1 <= k_next0;
        test_switch_empty4e_PROC_STATE <= test_switch_empty4e_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4f (test_cthread_switch_empty_case.cpp:361:5) 

// Thread-local variables
logic signed [31:0] k2;
logic signed [31:0] k_next1;
logic test_switch_empty4f_PROC_STATE;
logic test_switch_empty4f_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4f_comb     // test_cthread_switch_empty_case.cpp:361:5
    test_switch_empty4f_func;
end
function void test_switch_empty4f_func;
    k_next1 = k2;
    test_switch_empty4f_PROC_STATE_next = test_switch_empty4f_PROC_STATE;
    
    case (test_switch_empty4f_PROC_STATE)
        0: begin
            case (in)
            0 : begin  // Empty case without break
                k_next1 = 0;
                test_switch_empty4f_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:371:29;
            end
            1 : begin
                k_next1 = 0;
                test_switch_empty4f_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:371:29;
            end
            2 : begin  // Empty case without break
            end
            default : begin
            end
            endcase
            test_switch_empty4f_PROC_STATE_next = 0; return;    // test_cthread_switch_empty_case.cpp:365:13;
        end
        1: begin
            k_next1++;
            if (k_next1 < 2)
            begin
                test_switch_empty4f_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:371:29;
            end
            test_switch_empty4f_PROC_STATE_next = 0; return;    // test_cthread_switch_empty_case.cpp:365:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4f_ff
    if ( ~arstn ) begin
        test_switch_empty4f_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:365:13;
    end
    else begin
        k2 <= k_next1;
        test_switch_empty4f_PROC_STATE <= test_switch_empty4f_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4g (test_cthread_switch_empty_case.cpp:380:5) 

// Thread-local variables
logic test_switch_empty4g_PROC_STATE;
logic test_switch_empty4g_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4g_comb     // test_cthread_switch_empty_case.cpp:380:5
    test_switch_empty4g_func;
end
function void test_switch_empty4g_func;
    test_switch_empty4g_PROC_STATE_next = test_switch_empty4g_PROC_STATE;
    
    case (test_switch_empty4g_PROC_STATE)
        0: begin
            case (in)
            0 : begin  // Empty case without break
                test_switch_empty4g_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:389:25;
            end
            1 : begin
                test_switch_empty4g_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:389:25;
            end
            default : begin
            end
            endcase
            test_switch_empty4g_PROC_STATE_next = 0; return;    // test_cthread_switch_empty_case.cpp:384:13;
        end
        1: begin
            test_switch_empty4g_PROC_STATE_next = 0; return;    // test_cthread_switch_empty_case.cpp:384:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4g_ff
    if ( ~arstn ) begin
        test_switch_empty4g_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:384:13;
    end
    else begin
        test_switch_empty4g_PROC_STATE <= test_switch_empty4g_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty4i (test_cthread_switch_empty_case.cpp:396:5) 

// Thread-local variables
logic [1:0] test_switch_empty4i_PROC_STATE;
logic [1:0] test_switch_empty4i_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty4i_comb     // test_cthread_switch_empty_case.cpp:396:5
    test_switch_empty4i_func;
end
function void test_switch_empty4i_func;
    integer j_1;
    integer i;
    test_switch_empty4i_PROC_STATE_next = test_switch_empty4i_PROC_STATE;
    
    case (test_switch_empty4i_PROC_STATE)
        0: begin
            i = 0;
            test_switch_empty4i_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:404:13;
        end
        1: begin
            case (in)
            0 : begin
                j_1 = 1;
            end
            1 : begin  // Empty case without break
                j_1 = 2;
                if (|in)
                begin
                    test_switch_empty4i_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:411:41;
                end
            end
            default : begin
                j_1 = 2;
                if (|in)
                begin
                    test_switch_empty4i_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:411:41;
                end
            end
            endcase
            i = 1;
            i = 0;
            test_switch_empty4i_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:404:13;
        end
        2: begin
            i = 1;
            i = 0;
            test_switch_empty4i_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:404:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty4i_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty4i_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:399:9;
    end
    else begin
        test_switch_empty4i_PROC_STATE <= test_switch_empty4i_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty5 (test_cthread_switch_empty_case.cpp:419:5) 

// Thread-local variables
logic [1:0] test_switch_empty5_PROC_STATE;
logic [1:0] test_switch_empty5_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty5_comb     // test_cthread_switch_empty_case.cpp:419:5
    test_switch_empty5_func;
end
function void test_switch_empty5_func;
    integer j_1;
    integer i;
    integer k;
    test_switch_empty5_PROC_STATE_next = test_switch_empty5_PROC_STATE;
    
    case (test_switch_empty5_PROC_STATE)
        0: begin
            j_1 = 1;
            test_switch_empty5_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:427:13;
        end
        1: begin
            j_1 = 2;
            if (|in)
            begin
                i = j_1 - 1;
                // Call f1() begin
                case (1)
                1 : begin
                    k = 2;
                    test_switch_empty5_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:114:21;
                end
                endcase
                k = 3;
                // Call f1() end
            end
            j_1 = 1;
            test_switch_empty5_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:427:13;
        end
        2: begin
            // Call f1() begin
            k = 3;
            // Call f1() end
            j_1 = 1;
            test_switch_empty5_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:427:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty5_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty5_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:422:9;
    end
    else begin
        test_switch_empty5_PROC_STATE <= test_switch_empty5_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty5a (test_cthread_switch_empty_case.cpp:436:5) 

// Thread-local variables
logic [1:0] test_switch_empty5a_PROC_STATE;
logic [1:0] test_switch_empty5a_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty5a_comb     // test_cthread_switch_empty_case.cpp:436:5
    test_switch_empty5a_func;
end
function void test_switch_empty5a_func;
    integer j_1;
    integer i;
    integer k;
    test_switch_empty5a_PROC_STATE_next = test_switch_empty5a_PROC_STATE;
    
    case (test_switch_empty5a_PROC_STATE)
        0: begin
            j_1 = 1;
            test_switch_empty5a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:444:13;
        end
        1: begin
            if (|in)
            begin
                i = in;
                // Call f1() begin
                case (i)
                0 : begin  // Empty case without break
                    k = 2;
                    test_switch_empty5a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:114:21;
                end
                1 : begin
                    k = 2;
                    test_switch_empty5a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:114:21;
                end
                endcase
                k = 3;
                // Call f1() end
            end
            j_1 = 1;
            test_switch_empty5a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:444:13;
        end
        2: begin
            // Call f1() begin
            k = 3;
            // Call f1() end
            j_1 = 1;
            test_switch_empty5a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:444:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty5a_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty5a_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:439:9;
    end
    else begin
        test_switch_empty5a_PROC_STATE <= test_switch_empty5a_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty6 (test_cthread_switch_empty_case.cpp:453:5) 

// Thread-local variables
logic signed [31:0] j2;
logic signed [31:0] j_next2;
logic signed [31:0] i4;
logic signed [31:0] i_next3;
logic [1:0] test_switch_empty6_PROC_STATE;
logic [1:0] test_switch_empty6_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty6_comb     // test_cthread_switch_empty_case.cpp:453:5
    test_switch_empty6_func;
end
function void test_switch_empty6_func;
    integer TMP_0;
    integer TMP_1;
    i_next3 = i4;
    j_next2 = j2;
    test_switch_empty6_PROC_STATE_next = test_switch_empty6_PROC_STATE;
    
    case (test_switch_empty6_PROC_STATE)
        0: begin
            i_next3 = j_next2;
            // Call f2() begin
            case (i_next3)
            0 : begin  // Empty case without break
                test_switch_empty6_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:124:21;
            end
            1 : begin
                test_switch_empty6_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:124:21;
            end
            default : begin
                TMP_0 = i_next3;
            end
            endcase
            // Call f2() end
            j_next2 = TMP_0;
            test_switch_empty6_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:461:13;
        end
        1: begin
            // Call f2() begin
            TMP_0 = i_next3 + 2;
            // Call f2() end
            j_next2 = TMP_0;
            test_switch_empty6_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:461:13;
        end
        2: begin
            i_next3 = j_next2;
            // Call f2() begin
            case (i_next3)
            0 : begin  // Empty case without break
                test_switch_empty6_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:124:21;
            end
            1 : begin
                test_switch_empty6_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:124:21;
            end
            default : begin
                TMP_1 = i_next3;
            end
            endcase
            // Call f2() end
            j_next2 = TMP_1;
            test_switch_empty6_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:461:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty6_ff
    if ( ~arstn ) begin
        j2 <= 0;
        test_switch_empty6_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:456:9;
    end
    else begin
        j2 <= j_next2;
        i4 <= i_next3;
        test_switch_empty6_PROC_STATE <= test_switch_empty6_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_switch_empty6a (test_cthread_switch_empty_case.cpp:465:5) 

// Thread-local variables
logic signed [31:0] i5;
logic signed [31:0] i_next4;
logic [1:0] test_switch_empty6a_PROC_STATE;
logic [1:0] test_switch_empty6a_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_switch_empty6a_comb     // test_cthread_switch_empty_case.cpp:465:5
    test_switch_empty6a_func;
end
function void test_switch_empty6a_func;
    integer j_1;
    integer TMP_0;
    integer TMP_1;
    i_next4 = i5;
    test_switch_empty6a_PROC_STATE_next = test_switch_empty6a_PROC_STATE;
    
    case (test_switch_empty6a_PROC_STATE)
        0: begin
            i_next4 = in;
            // Call f2() begin
            case (i_next4)
            0 : begin  // Empty case without break
                test_switch_empty6a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:124:21;
            end
            1 : begin
                test_switch_empty6a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:124:21;
            end
            default : begin
                TMP_0 = i_next4;
            end
            endcase
            // Call f2() end
            j_1 = TMP_0;
            test_switch_empty6a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:473:13;
        end
        1: begin
            // Call f2() begin
            TMP_0 = i_next4 + 2;
            // Call f2() end
            j_1 = TMP_0;
            test_switch_empty6a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:473:13;
        end
        2: begin
            i_next4 = in;
            // Call f2() begin
            case (i_next4)
            0 : begin  // Empty case without break
                test_switch_empty6a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:124:21;
            end
            1 : begin
                test_switch_empty6a_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:124:21;
            end
            default : begin
                TMP_1 = i_next4;
            end
            endcase
            // Call f2() end
            j_1 = TMP_1;
            test_switch_empty6a_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:473:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_switch_empty6a_ff
    if ( ~arstn ) begin
        integer j_1;
        j_1 = 0;
        test_switch_empty6a_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:468:9;
    end
    else begin
        i5 <= i_next4;
        test_switch_empty6a_PROC_STATE <= test_switch_empty6a_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_thread (test_cthread_switch_empty_case.cpp:477:5) 

// Thread-local variables
logic signed [31:0] out_next;
logic [2:0] test_thread_PROC_STATE;
logic [2:0] test_thread_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : test_thread_comb     // test_cthread_switch_empty_case.cpp:477:5
    test_thread_func;
end
function void test_thread_func;
    out_next = out;
    test_thread_PROC_STATE_next = test_thread_PROC_STATE;
    
    case (test_thread_PROC_STATE)
        0: begin
            case (in)
            0 : begin  // Empty case without break
                out_next = 10;
            end
            1 : begin
                out_next = 10;
            end
            2 : begin
                out_next = 10;
                out_next = 11;
            end
            3 : begin  // Empty case without break
                out_next = 13;
            end
            default : begin
                out_next = 13;
            end
            endcase
            case (in)
            0 : begin  // Empty case without break
                test_thread_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:503:17;
            end
            1 : begin
                test_thread_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:503:17;
            end
            default : begin
                test_thread_PROC_STATE_next = 3; return;    // test_cthread_switch_empty_case.cpp:509:17;
            end
            endcase
        end
        1: begin
            out_next = 2;
            test_thread_PROC_STATE_next = 2; return;    // test_cthread_switch_empty_case.cpp:505:17;
        end
        2: begin
            test_thread_PROC_STATE_next = 4; return;    // test_cthread_switch_empty_case.cpp:513:13;
        end
        3: begin
            test_thread_PROC_STATE_next = 4; return;    // test_cthread_switch_empty_case.cpp:513:13;
        end
        4: begin
            case (in)
            0 : begin  // Empty case without break
                out_next = 10;
            end
            1 : begin
                out_next = 10;
            end
            2 : begin
                out_next = 10;
                out_next = 11;
            end
            3 : begin  // Empty case without break
                out_next = 13;
            end
            default : begin
                out_next = 13;
            end
            endcase
            case (in)
            0 : begin  // Empty case without break
                test_thread_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:503:17;
            end
            1 : begin
                test_thread_PROC_STATE_next = 1; return;    // test_cthread_switch_empty_case.cpp:503:17;
            end
            default : begin
                test_thread_PROC_STATE_next = 3; return;    // test_cthread_switch_empty_case.cpp:509:17;
            end
            endcase
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : test_thread_ff
    if ( ~arstn ) begin
        out <= 0;
        test_thread_PROC_STATE <= 0;    // test_cthread_switch_empty_case.cpp:480:9;
    end
    else begin
        out <= out_next;
        test_thread_PROC_STATE <= test_thread_PROC_STATE_next;
    end
end

endmodule


