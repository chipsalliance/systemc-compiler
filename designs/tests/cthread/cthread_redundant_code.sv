//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.3.12
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
);

// SystemC signals
logic clk;
logic arstn;

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_other_types_fns (test_cthread_redundant_code.cpp:73:5) 

// Thread-local variables
logic [14:0] i;
logic [14:0] i_next;
logic signed [24:0] i0;
logic signed [24:0] i_next0;
logic [3:0] for_stmt_other_types_fns_PROC_STATE;
logic [3:0] for_stmt_other_types_fns_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_other_types_fns_comb     // test_cthread_redundant_code.cpp:73:5
    for_stmt_other_types_fns_func;
end
function void for_stmt_other_types_fns_func;
    logic [9:0] i_1;
    integer k;
    i_next = i;
    i_next0 = i0;
    for_stmt_other_types_fns_PROC_STATE_next = for_stmt_other_types_fns_PROC_STATE;
    
    case (for_stmt_other_types_fns_PROC_STATE)
        0: begin
            // Call for_stmt_no_wait() begin
            for (i_1 = 0; i_1 < 2; i_1++)
            begin
                k = 1;
            end
            k = 2;
            for_stmt_other_types_fns_PROC_STATE_next = 1; return;    // test_cthread_redundant_code.cpp:119:13;
            // Call for_stmt_no_wait() end
        end
        1: begin
            // Call for_stmt_no_wait() begin
            for (i_1 = 0; i_1 < 2; i_1++)
            begin
                k = 1;
            end
            k = 2;
            for_stmt_other_types_fns_PROC_STATE_next = 1; return;    // test_cthread_redundant_code.cpp:119:13;
            // Call for_stmt_no_wait() end
        end
        2: begin
        end
        3: begin
        end
        4: begin
        end
        5: begin
        end
        6: begin
        end
        7: begin
        end
        8: begin
        end
        9: begin
        end
    endcase
endfunction

// Syncrhonous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_other_types_fns_ff
    if ( ~arstn ) begin
        logic [9:0] par1;
        logic [9:0] i_1;
        integer k;
        par1 = 10'd0;
        // Call for_stmt_no_wait() begin
        i_1 = par1;
        k = 0;
        for_stmt_other_types_fns_PROC_STATE <= 0;    // test_cthread_redundant_code.cpp:110:9;
        // Call for_stmt_no_wait() end
    end
    else begin
        i <= i_next;
        i0 <= i_next0;
        for_stmt_other_types_fns_PROC_STATE <= for_stmt_other_types_fns_PROC_STATE_next;
    end
end

endmodule


