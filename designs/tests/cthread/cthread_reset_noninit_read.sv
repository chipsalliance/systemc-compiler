//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.16
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
    input logic clk
);

// Variables generated for SystemC signals
logic nrst;
logic signed [31:0] s0;
logic signed [31:0] s1;

// Local parameters generated for C++ constants
localparam logic signed [31:0] m = 11;
localparam logic signed [31:0] n = 12;
localparam logic signed [31:0] mm = 13;

//------------------------------------------------------------------------------
// Clocked THREAD: readProc1 (test_reset_noninit_read.cpp:51:5) 

// Next-state combinational logic
always_comb begin : readProc1_comb     // test_reset_noninit_read.cpp:51:5
    readProc1_func;
end
function void readProc1_func;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : readProc1_ff
    if ( ~nrst ) begin
        integer aa[3];
        integer bb[3];
        integer cc[3][3];
        integer dd[3];
        integer ii;
        integer i;
        integer ii_1;
        integer i_1;
        integer ii_2;
        integer i_2;
        integer j;
        integer l;
        bb[0] = 0; bb[1] = 1; bb[2] = 2;
        // Call f1() begin
        ii = aa[1];
        // Call f1() end
        i = 1;
        // Call f2() begin
        ii_1 = bb[i];
        // Call f2() end
        i_1 = 0;
        // Call f3() begin
        ii_2 = cc[i_1 + 1][i_1 + 2];
        // Call f3() end
        i_2 = dd[1];
        i_2 = j;
        i_2 = l + 1;
        s0 <= i_2;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: readProc2 (test_reset_noninit_read.cpp:78:5) 

// Thread-local variables
logic signed [31:0] p;
logic signed [31:0] s1_next;

// Next-state combinational logic
always_comb begin : readProc2_comb     // test_reset_noninit_read.cpp:78:5
    readProc2_func;
end
function void readProc2_func;
    s1_next = s1;
    s1_next = mm + 1;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : readProc2_ff
    if ( ~nrst ) begin
        integer i;
        integer j;
        i = p;
        i = mm;
        j = m;
        j = n;
        s1 <= i + j;
    end
    else begin
        s1 <= s1_next;
    end
end

endmodule


