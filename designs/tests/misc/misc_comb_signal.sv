//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.32
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: comb_signal_module ()
//
module comb_signal_module // "tb.mod"
(
    input logic clk,
    input logic nrst
);

// Variables generated for SystemC signals
logic a;
logic req1;
logic req2;
logic c;
logic d;

//------------------------------------------------------------------------------
// Method process: methProc (test_comb_signal.cpp:34:5) 

always_comb 
begin : methProc     // test_comb_signal.cpp:34:5
    if (nrst)
    begin
        req1 = 0;
        req2 = 0;
    end else begin
        req1 = a;
        req2 = a;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thrdProc (test_comb_signal.cpp:44:5) 

// Thread-local variables
logic req1_next;
logic c_next;
logic d_next;
logic a0;
logic a_next;

// Next-state combinational logic
always_comb begin : thrdProc_comb     // test_comb_signal.cpp:44:5
    thrdProc_func;
end
function void thrdProc_func;
    a_next = a0;
    c_next = c;
    d = d_next;
    req1 = req1_next;
    req2 = '0;
    c_next = 1;
    d = 2;
    req1 = a_next;
    req2 = a_next;
    a_next = !a_next;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thrdProc_ff
    if ( ~nrst ) begin
        a0 <= 0;
        req1_next <= 1;
        c <= 0;
        d_next <= 0;
    end
    else begin
        req1_next <= req1;
        c <= c_next;
        d_next <= d;
        a0 <= a_next;
    end
end

endmodule


