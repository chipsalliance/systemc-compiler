//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.18
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
    input logic in,
    output logic out
);

// Variables generated for SystemC signals
logic signed [31:0] s;
logic bv[3];

// Local parameters generated for C++ constants
localparam logic signed [31:0] k = 12;

//------------------------------------------------------------------------------
// Method process: compound_array (test_compound.cpp:45:5) 

always_comb 
begin : compound_array     // test_compound.cpp:45:5
    integer a[3];
    logic [3:0] x[3];
    integer i;
    a[0] = 1; a[1] = 2; a[2] = 3;
    x[0] = 4; x[1] = 5; x[2] = 6;
    i = s;
    a[0] = a[0] + 1;
    a[i] = a[i] + 1;
    x[1] = x[1] - 1;
    x[i] = x[i] * 2;
end

//------------------------------------------------------------------------------
// Method process: compound_array_2d (test_compound.cpp:73:5) 

always_comb 
begin : compound_array_2d     // test_compound.cpp:73:5
    integer a[2][3];
    logic [3:0] x[2][3];
    integer i_1;
    x[0][0] = 0; x[0][1] = 0; x[0][2] = 0; x[1][0] = 0; x[1][1] = 0; x[1][2] = 0;
    for (integer i = 0; i < 2; ++i)
    begin
        for (integer j = 0; j < 3; ++j)
        begin
            a[i][j] = 3 * i + j + 1;
            x[i][j] = 3 * i + j + 1;
        end
    end
    i_1 = s;
    a[1][1] = a[1][1] + 1;
    a[i_1][1] = a[i_1][1] + 1;
    x[0][2] = x[0][2] - 2;
    x[0][i_1] = x[0][i_1] / 2;
    x[1][i_1] = x[1][i_1] % 2;
end

//------------------------------------------------------------------------------
// Method process: compound_assign (test_compound.cpp:126:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : compound_assign     // test_compound.cpp:126:5
    integer k_1;
    integer i;
    k_1 = 2;
    i = 1;
    i = i + 1;
    m = 1;
    `ifndef INTEL_SVA_OFF
        assert (i == 2) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
    i = i - m;
    `ifndef INTEL_SVA_OFF
        assert (i == 1) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
    i = i * k_1;
    i = i / i;
    i = i % (k_1 + m);
    i = i | 2;
    i = i & 3;
    i = i ^ (4 + i);
end

//------------------------------------------------------------------------------
// Method process: compound_assign_brackets (test_compound.cpp:143:5) 

always_comb 
begin : compound_assign_brackets     // test_compound.cpp:143:5
    integer i;
    integer e;
    integer d;
    e = 2;
    d = -3'sd3;
    i = 1;
    i = i * (e + d);
    `ifndef INTEL_SVA_OFF
        assert (i == -2'sd1) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
    i = 12;
    i = i / (e - d * 2 + i - 10);
    `ifndef INTEL_SVA_OFF
        assert (i == 1) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
    i = 5;
    i = i % (1 + 1);
    `ifndef INTEL_SVA_OFF
        assert (i == 1) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: compound_bool_bitwise (test_compound.cpp:161:5) 

always_comb 
begin : compound_bool_bitwise     // test_compound.cpp:161:5
    logic b;
    logic bb;
    logic a;
    logic [11:0] x;
    logic signed [11:0] y;
    integer i;
    b = |s;
    bb = |s;
    a = s;
    x = s;
    y = s;
    i = s;
    b = b && bb;
    b = b && a;
    b = b && |x;
    b = b && |y;
    b = b && |i;
    b = b && |s;
    b = b && bv[1];
    b = b & bb;
    b = b & a;
    b = b & x;
    b = b & y;
    b = b & i;
    b = b & s;
    b = b & bv[1];
    b = b | bb;
    b = b | s;
    b = b | x;
    b = b ^ bb;
    b = b ^ i;
    b = b ^ bv[1];
end

//------------------------------------------------------------------------------
// Method process: compound_bool_arithm (test_compound.cpp:194:5) 

always_comb 
begin : compound_bool_arithm     // test_compound.cpp:194:5
    logic b;
    logic bb;
    logic a;
    logic [11:0] x;
    logic signed [11:0] y;
    integer i;
    b = |s;
    bb = |s;
    a = s;
    x = s;
    y = s;
    i = s;
    b = b + bb;
    b = b + a;
    b = b + x;
    b = b + y;
    b = b + i;
    b = b + s;
    b = b + bv[1];
    b = b * bb;
    b = b / s;
    b = b - x;
    b = b % bb;
    b = b >> i;
    b = b << bv[1];
end

//------------------------------------------------------------------------------
// Method process: compound_ref_compound (test_compound.cpp:219:5) 

always_comb 
begin : compound_ref_compound     // test_compound.cpp:219:5
    integer k_1;
    integer i;
    integer l;
    i = s;
    l = 1;
    l = l + i;
    if (|l)
    begin
        k_1 = 1;
    end
    l = 2;
end

//------------------------------------------------------------------------------
// Method process: sc_compound_assign (test_compound.cpp:234:5) 

always_comb 
begin : sc_compound_assign     // test_compound.cpp:234:5
    logic [2:0] u;
    logic signed [3:0] i;
    logic signed [3:0] m2;
    u = 3;
    i = -3'sd2;
    m2 = 1;
    i = i + 1;
    `ifndef INTEL_SVA_OFF
        assert (i == -2'sd1) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
    i = i - m2;
    `ifndef INTEL_SVA_OFF
        assert (i == -3'sd2) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
    i = i * 1;
    `ifndef INTEL_SVA_OFF
        assert (i == -3'sd2) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
    i = i / signed'({1'b0, u});
    `ifndef INTEL_SVA_OFF
        assert (i == 0) else $error("Assertion failed at test_compound.cpp:42:24>");
    `endif // INTEL_SVA_OFF
    u = u % k;
    u = u | 2;
    u = u & 3;
    u = u ^ 5'd4;
    u = u <<< k;
    u = u >>> (4'(2 + i));
end

endmodule


