//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.16
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
);

// Variables generated for SystemC signals
logic [31:0] inp;
logic s;
logic [7:0] ssig[2];
logic sig;
logic bsig;
logic signed [31:0] isig;
logic as;
logic signed bs;
logic cs;
logic signed ds;

// Local parameters generated for C++ constants
localparam logic signed [7:0] y = 0;
localparam logic [7:0] uy = 0;
localparam logic [31:0] MC = 2;
localparam logic [31:0] WIDTH = 1;
localparam logic [31:0] MSC = 3;

//------------------------------------------------------------------------------
// Method process: bit_range_rhs (test_bit_range_access.cpp:85:5) 

always_comb 
begin : bit_range_rhs     // test_bit_range_access.cpp:85:5
    logic [2:0] i;
    logic b;
    i = 3;
    b = i[0];
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = i[1];
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: bit_in_loop (test_bit_range_access.cpp:96:5) 

always_comb 
begin : bit_in_loop     // test_bit_range_access.cpp:96:5
    logic [3:0] xw;
    logic xwZero;
    xw = 0;
    xw = 0;
    for (integer i = 0; i < 4; i++)
    begin
        xw[i] = s;
    end
    xwZero = (xw == 0);
end

//------------------------------------------------------------------------------
// Method process: sc_uint_wide (test_bit_range_access.cpp:123:5) 

always_comb 
begin : sc_uint_wide     // test_bit_range_access.cpp:123:5
    logic b;
    logic k;
    k = 0;
end

//------------------------------------------------------------------------------
// Method process: sc_uint_ctor_bit (test_bit_range_access.cpp:132:5) 

always_comb 
begin : sc_uint_ctor_bit     // test_bit_range_access.cpp:132:5
    logic [2:0] i;
    logic [2:0] ii;
    logic [1:0] j;
    logic k;
    logic [1:0] y_1;
    logic z;
    logic b;
    i = 1;
    ii = 2;
    j = i;
    k = i;
    y_1 = 0;
    z = 0;
    b = |i;
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(i);
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = i[0];
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(k);
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = k;
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(inp);
    b = 1'(inp[1]);
    b = |ii;
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = ii[0];
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(ii);
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = |2'(ii);
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(ii);
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 1'(i);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = i[0];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 1'(k);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = k;
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = ii[0];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = ii[1];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 1'(ii);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 2'(ii);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 2) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 1'(ii);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 1'(i);
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = i[0];
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 1'(k);
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = k;
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = ii;
    `ifndef INTEL_SVA_OFF
        assert (z == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    k = ii;
    `ifndef INTEL_SVA_OFF
        assert (k == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: sc_uint_ctor_range (test_bit_range_access.cpp:206:5) 

always_comb 
begin : sc_uint_ctor_range     // test_bit_range_access.cpp:206:5
    logic [2:0] i;
    logic [2:0] ii;
    logic k;
    logic [1:0] y_1;
    logic z;
    logic b;
    i = 1;
    ii = 2;
    k = i;
    y_1 = 0;
    z = 0;
    b = |i;
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(i);
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = i[0 : 0];
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(k);
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = k;
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(inp);
    b = 1'(inp[1 : 1]);
    b = |ii;
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = ii[0 : 0];
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(ii);
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = |2'(ii);
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = ii[0 : 0];
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = ii[1 : 1];
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = |ii[1 : 0];
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = 1'(ii);
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 1'(i);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = i[0 : 0];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 1'(k);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = k;
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = ii[0 : 0];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = ii[1 : 1];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = ii[1 : 0];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 2) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 1'(ii);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 2'(ii);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 2) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = ii[0 : 0];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = ii[1 : 1];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = ii[1 : 0];
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 2) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    y_1 = 1'(ii);
    `ifndef INTEL_SVA_OFF
        assert (y_1 == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 1'(i);
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = i[0 : 0];
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 1'(k);
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = k;
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = ii;
    `ifndef INTEL_SVA_OFF
        assert (z == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    k = ii;
    `ifndef INTEL_SVA_OFF
        assert (k == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: signal_array_part_sel (test_bit_range_access.cpp:295:5) 

always_comb 
begin : signal_array_part_sel     // test_bit_range_access.cpp:295:5
    logic b;
    logic [4:0] x_1;
    integer i;
    b = ssig[1][2];
    x_1 = ssig[1][4 : 3];
    i = inp;
    x_1 = ssig[i][i +: 2];
end

//------------------------------------------------------------------------------
// Method process: to_int (test_bit_range_access.cpp:305:5) 

always_comb 
begin : to_int     // test_bit_range_access.cpp:305:5
    integer a;
    logic [38:0] u;
    logic signed [40:0] i;
    logic [46:0] bu;
    logic signed [66:0] bi;
    logic signed [89:0] z;
    a = -3'sd3;
    u = ('h11 <<< 32) + 1;
    i = ((-7'sh22) <<< 32) - 'h2;
    bu = 'h23;
    bi = 'h104;
    z = 0;
    z = u;
    `ifndef INTEL_SVA_OFF
        assert (z == ('h11 <<< 32) + 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 32'(u);
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 32'(u);
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 64'(u);
    `ifndef INTEL_SVA_OFF
        assert (z == ('h11 <<< 32) + 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = i;
    `ifndef INTEL_SVA_OFF
        assert (z == ((-7'sh22) <<< 32) - 'h2) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 32'(i);
    `ifndef INTEL_SVA_OFF
        assert (z == -3'sh2) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 64'(i);
    `ifndef INTEL_SVA_OFF
        assert (z == ((-7'sh22) <<< 32) - 'h2) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = signed'({1'b0, 32'(u)}) + signed'({1'b0, 64'(u)}) + signed'({1'b0, 64'(u)});
    z = 32'(u) + 64'(u) + 64'(u);
    z = 32'(i) + 64'(i) + 64'(i);
    z = 32'(i) + 64'(i) + 64'(i);
    z = signed'({1'b0, 32'(bu)}) + signed'({1'b0, 64'(bu)}) + signed'({1'b0, 64'(bu)});
    z = 32'(bu) + 64'(bu) + 64'(bu);
    z = 32'(bi) + 64'(bi) + 64'(bi);
    z = 32'(bi) + 64'(bi) + 64'(bi);
end

//------------------------------------------------------------------------------
// Method process: to_int_bit_range (test_bit_range_access.cpp:349:5) 

always_comb 
begin : to_int_bit_range     // test_bit_range_access.cpp:349:5
    logic [44:0] u;
    logic signed [40:0] i;
    logic [46:0] bu;
    logic signed [66:0] bi;
    logic signed [89:0] z;
    u = ('h12 <<< 32) + 1;
    i = ((-7'sh22) <<< 32) - 'h2;
    bu = 'h23;
    bi = 'h104;
    z = 0;
    z = u[37 : 0];
    `ifndef INTEL_SVA_OFF
        assert (z == ('h12 <<< 32) + 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 32'(u[37 : 0]);
    `ifndef INTEL_SVA_OFF
        assert (z == 1) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    z = 32'(u[37 : 1]);
    `ifndef INTEL_SVA_OFF
        assert (z == 0) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: sc_uint_to_bool (test_bit_range_access.cpp:369:5) 

always_comb 
begin : sc_uint_to_bool     // test_bit_range_access.cpp:369:5
    logic [1:0] i;
    logic signed [4:0] j;
    logic [16:0] bi;
    logic b;
    i = 1;
    j = 1;
    bi = 32'(inp);
    b = as;
    b = |j;
    b = |j[3 : 1];
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    j = 2;
    b = j[1];
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    j = 4;
    b = j[2];
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    b = j[1];
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_bit_range_access.cpp:83:24>");
    `endif // INTEL_SVA_OFF
    sig = |i;
    sig = |32'(bi);
    sig = as;
    sig = as;
    sig = |i[1 : 0];
    sig = |j[3 : 1];
    sig = j[4];
    sig = bi[16];
    sig = |32'(bi[3 : 1]);
end

//------------------------------------------------------------------------------
// Method process: int_to_bool (test_bit_range_access.cpp:402:5) 

always_comb 
begin : int_to_bool     // test_bit_range_access.cpp:402:5
    integer i;
    logic b;
    integer c;
    logic [1:0] x_1;
    i = 1;
    b = |i;
    c = 1;
    b = |c;
    b = |(2 - c);
    b = |isig;
    b = 1'(i);
    x_1 = 1;
    b = |x_1;
    b = 1'(x_1);
    b = |x_1;
    bsig = |i;
    bsig = |isig;
    bsig = |isig;
end

//------------------------------------------------------------------------------
// Method process: zero_zero_range (test_bit_range_access.cpp:434:5) 

always_comb 
begin : zero_zero_range     // test_bit_range_access.cpp:434:5
    logic a;
    logic aa;
    logic ab;
    logic [4:0] j;
    logic [4:0] jj;
    logic signed b;
    logic signed bb;
    integer i;
    a = 0;
    aa = a;
    a = 1;
    ab = as;
    j = as;
    jj = 5'(as);
    b = 0;
    bb = b;
    b = 1;
    i = bs;
    i = bs + 1;
end

//------------------------------------------------------------------------------
// Method process: zero_zero_range_big (test_bit_range_access.cpp:450:5) 

always_comb 
begin : zero_zero_range_big     // test_bit_range_access.cpp:450:5
    logic c;
    logic cc;
    logic ab;
    logic [4:0] j;
    logic [4:0] jj;
    logic signed d;
    logic signed dd;
    integer i;
    c = 0;
    cc = c;
    c = 1;
    ab = cs != 0;
    j = 5'(cs);
    jj = cs + j;
    d = 0;
    dd = d;
    d = 1;
    i = 32'(ds);
    i = signed'({1'b0, 64'(ds)}) + 1;
end

//------------------------------------------------------------------------------
// Method process: zero_zero_bit (test_bit_range_access.cpp:466:5) 

always_comb 
begin : zero_zero_bit     // test_bit_range_access.cpp:466:5
    logic a;
    logic aa;
    logic ab;
    integer j;
    logic signed [63:0] jj;
    a = 0;
    aa = a;
    a = 1;
    ab = as;
    j = as;
    jj = as;
end

//------------------------------------------------------------------------------
// Method process: zero_zero_bit_big (test_bit_range_access.cpp:476:5) 

always_comb 
begin : zero_zero_bit_big     // test_bit_range_access.cpp:476:5
    logic c;
    logic cc;
    logic ab;
    logic [4:0] j;
    logic [4:0] jj;
    c = 0;
    cc = c;
    c = 1;
    ab = cs != 0;
    j = 5'(cs);
    jj = cs + j;
end

//------------------------------------------------------------------------------
// Method process: bit_range_sel (test_bit_range_access.cpp:486:5) 

// Process-local variables
logic signed [7:0] x;
logic [7:0] ux;

always_comb 
begin : bit_range_sel     // test_bit_range_access.cpp:486:5
    x[1] = y[0];
    ux[1] = uy[0];
    x[3 : 2] = y[2 : 1];
    x[5 : 3] = y[4 : 2];
    ux[3 : 2] = uy[2 : 1];
    ux[5 : 3] = uy[4 : 2];
end

//------------------------------------------------------------------------------
// Method process: bit_range_array (test_bit_range_access.cpp:500:5) 

always_comb 
begin : bit_range_array     // test_bit_range_access.cpp:500:5
    integer unsigned LC;
    logic [3:0] uarr[3];
    logic [64:0] barr[3];
    logic b;
    LC = 4;
    uarr[0] = 0; uarr[1] = 0; uarr[2] = 0;
    barr[0] = 0; barr[1] = 0; barr[2] = 0;
    uarr[0][2 : 1] = 1;
    b = uarr[MC][0] || uarr[MSC - 1][3];
    b = |uarr[LC - MSC][1 : 0];
    barr[MC - 1][64 : 63] = uarr[MC - 2][1 : 0];
end

endmodule


