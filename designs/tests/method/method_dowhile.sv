//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.4.23
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic a;
logic b;
logic c;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .b(b),
  .c(c)
);

endmodule



//==============================================================================
//
// Module: A (test_dowhile.cpp:161:5)
//
module A // "b_mod.a_mod"
(
    input logic a,
    output logic b,
    output logic c
);

// Variables generated for SystemC signals
logic dummy;

// Local parameters generated for C++ constants
localparam logic signed [31:0] m = 11;

//------------------------------------------------------------------------------
// Method process: do_while1 (test_dowhile.cpp:40:5) 

always_comb 
begin : do_while1     // test_dowhile.cpp:40:5
    integer i;
    i = 0;
    do
    begin
        i++;
    end
    while (i < 2);
end

//------------------------------------------------------------------------------
// Method process: do_while2 (test_dowhile.cpp:49:5) 

always_comb 
begin : do_while2     // test_dowhile.cpp:49:5
    integer j;
    integer i;
    j = 1;
    i = 0;
    do
    begin
        i++;
        j = 2;
    end
    while (i < 3);
    j = 4;
end

//------------------------------------------------------------------------------
// Method process: do_while3 (test_dowhile.cpp:66:5) 

always_comb 
begin : do_while3     // test_dowhile.cpp:66:5
    integer i;
    integer j;
    integer k_1;
    integer m_1;
    i = 0;
    j = 1;
    k_1 = 0;
    m_1 = dummy;
    if (m_1 > 0)
    begin
        j = 2;
    end else begin
        j = 3;
    end
    do
    begin
        k_1++;
        i++;
    end
    while (i < 2);
    j = 4;
end

//------------------------------------------------------------------------------
// Method process: do_while4 (test_dowhile.cpp:83:5) 

always_comb 
begin : do_while4     // test_dowhile.cpp:83:5
    integer i;
    integer j;
    integer k_1;
    integer m_1;
    i = 0;
    j = 1;
    k_1 = 0;
    m_1 = dummy;
    if (m_1 > 0)
    begin
        j = 2;
    end
    do
    begin
        k_1++;
        i++;
    end
    while (i < 2);
    j = 3;
end

//------------------------------------------------------------------------------
// Method process: do_while5 (test_dowhile.cpp:99:5) 

always_comb 
begin : do_while5     // test_dowhile.cpp:99:5
    integer k_1;
    integer m_1;
    integer i;
    integer j;
    k_1 = 0;
    m_1 = dummy;
    i = 0;
    do
    begin
        j = 0;
        i++;
        do
        begin
            k_1 = k_1 + 1;
            j++;
        end
        while (j < 3);
    end
    while (i < 2);
end

//------------------------------------------------------------------------------
// Method process: do_while6 (test_dowhile.cpp:114:5) 

always_comb 
begin : do_while6     // test_dowhile.cpp:114:5
    integer k_1;
    integer m_1;
    integer i;
    k_1 = 0;
    m_1 = dummy;
    i = 0;
    if (m_1 > 0)
    begin
        do
        begin
            k_1 = k_1 + 1;
            i++;
        end
        while (i < 2);
    end else begin
        k_1 = 3;
    end
end

//------------------------------------------------------------------------------
// Method process: do_while_fcall (test_dowhile.cpp:145:5) 

always_comb 
begin : do_while_fcall     // test_dowhile.cpp:145:5
    integer k_1;
    integer TMP_0;
    integer i;
    k_1 = 0;
    do
    begin
        i = k_1;
        // Call f() begin
        TMP_0 = i + 1;
        // Call f() end
        k_1 = TMP_0;
    end
    while (k_1 < 3);
end

endmodule


